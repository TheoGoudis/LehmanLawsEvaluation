package txm;

class GuiHelpLawInfo {
	private static String[] laws=new String[8];
	GuiHelpLawInfo(){
		getLaws()[0]="\n\n Συνεχής Αλλαγή: Ένα σύστημα λογισμικού πρέπει να προσαρμόζεται συνεχώς στις ανάγκες των χρηστών, διαφορετικά η χρήση του γίνεται λιγότερο ικανοποιητική με την πάροδο του χρόνου. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν σε κάθε έκδοση του λογισμικού υπάρχουν αλλαγές στις λειτουργίες ή στις δομές δεδομένων του εργαλείου και κάθε χρόνο υπάρχει τουλάχιστον μια έκδοση του λογισμικού
		
		getLaws()[1]="\n\n Αυξανόμενη Πολυπλοκότητα: Όπως ένα σύστημα λογισμικού αλλάζει με την πάροδο του χρόνου, η πολυπλοκότητά του αυξάνει, εκτός και αν γίνονται εργασίες συντήρησης για τη μείωση της. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν η πολυπλοκότητα	τείνει να αυξάνεται ή αν πολυπλοκότητα η δεν έχει αυξητική τάση και επιπλέον στο ραβδόγραμμα υπάρχουν εμφανείς δραστηριότητες συντήρησης
		
		getLaws()[2]="\n\n Αυτορυθμιζόμενη Εξέλιξη: Η εξέλιξη ενός συστήματος λογισμικού ρυθμίζεται από διαδικασίες ανατροφοδότησης. Υπάρχουν 2 είδη ανατροφοδότησης θετική και αρνητική. Η θετική ανατροφοδότηση"
				+ " περιλαμβάνει νέες απαιτήσεις από διάφορες πηγές (π.χ., χρήστες,  πελάτες) που οδηγούν στην αύξηση των λειτουργιών του συστήματος. Η αρνητική ανατροφοδότηση περιλαμβάνει αναφορές σε προβλήματα που προκύπτουν (π.χ., σφάλματα, "
				+ "κακή σχεδίαση, υλοποίηση) και οδηγούν σε δραστηριότητες συντήρησης του λογισμικού που περιορίζουν την ανεξέλεγκτη ανάπτυξή του. Τα δύο είδη ανατροφοδότησης είναι αντικρουόμενα (με την έννοια ότι οι πόροι που είναι διαθέσιμοι για την εξέλιξη του "
				+ "συστήματος μοιράζονται σε δραστηριότητες που αφορούν στα 2 είδη ανατροφοδότησης) με συνέπεια η εξέλιξη να σταθεροποιείται, με την υποσημείωση ότι σταθερότητα δεν σημαίνει"
				+ " ότι δεν γίνονται αλλαγές, αλλά ότι γίνονται με ένα οργανωμένο τρόπο που ακολουθεί συγκεκριμένα επαναλαμβανόμενα μοτίβα. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν η εξέλιξη γίνεται με οργανωμένο συστηματικό τρόπο ο οποίος αντικατοπτρίζεται στην ύπαρξη επαναλαμβανόμενων μοτίβων στα ραβδογράμματα. Τα μοτίβα αυτά συνήθως έχουν την μορφή κυματισμών (spikes)
		
		getLaws()[3]="\n\n Διατήρηση της Εργασιακής Σταθερότητας:Ο ρυθμός των εργασιών που γίνονται για την εξέλιξη ενός συστήματος λογισμικού τείνει να είναι σταθερός με την πάροδο του χρόνου. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν ο ρυθμός εργασιών είναι σταθερός
		
		getLaws()[4]="\n\n Διατήρηση της Εξοικείωσης: Η αύξηση των λειτουργιών ενός συστήματος λογισμικού περιορίζεται από την ανάγκη εξοικείωσης των χρηστών με τις αλλαγές που γίνονται στο σύστημα. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν και στα δυο	γραφήματα εκδόσεις με μεγάλη αύξηση ακολουθούνται από εκδόσεις με μικρότερη, μηδενική ή αρνητική αύξηση.
		
		getLaws()[5]="\n\n Συνεχής Αύξηση: Οι λειτουργίες ενός συστήματος λογισμικού αυξάνουν συνεχώς με στόχο την ικανοποίηση των αναγκών των χρηστών που μεταβάλλονται με την πάροδο του χρόνου. ";
		//Το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν υπάρχει συνεχής αύξηση
		
		getLaws()[6]="\n\n Πτωτική Ποιότητα: Η ποιότητα ενός συστήματος λογισμικού θα εμφανίζει πτωτική τάση, εκτός και εάν στο σύστημα γίνεται εντατική συντήρηση και αναπροσαρμογή. ";
		//Ο 7ος νόμος είναι λογική συνέπεια του 2ου και του 6ου νόμου
		
		getLaws()[7]="\n\n Σύστημα Ανατροφοδότησης: Η εξέλιξη ενός συστήματος λογισμικού είναι ένας μηχανισμός ανατροφοδότησης που περιλαμβάνει πολλαπλά επίπεδα, βρόγχους και"
				+ " εμπλεκόμενους. Η κατανόηση και μοντελοποίηση του μηχανισμού αυτού επιτρέπει την πρόβλεψη της εξέλιξης του λογισμικού, που είναι σημαντική για την αποτελεσματική οργάνωση και διαχείριση των πόρων που απαιτούνται για την εξέλιξη του λογισμικού. ";
		//το συμπέρασμα ότι ισχύει ο νόμος προκύπτει αν το πλήθος των λειτουργιών μιας μελλοντικής έκδοσης του συστήματος μπορεί να προβλεφτεί με ακρίβεια με βάση μια ανατροφοδοτούμενη φόρμουλα η οποία λαμβάνει υπόψη της το πλήθος των λειτουργιών του συστήματος σε προηγούμενες εκδόσεις. 
	}
	public static String[] getLaws() {
		return laws;
	}
	public static void setLaws(String[] laws) {
		GuiHelpLawInfo.laws = laws;
	}
}
